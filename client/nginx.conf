server {
  listen 80;
  server_name qa.calento.space api.calento.space localhost;
  
  # Redirect all HTTP requests to HTTPS (except localhost)
  if ($host != "localhost") {
    return 301 https://$host$request_uri;
  }
  
  # Allow localhost for development
  location / {
    proxy_pass http://client:3000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }
}

# HTTPS server for API domain
server {
  listen 443 ssl;
  http2 on;
  server_name api.calento.space;

  # SSL Configuration
  ssl_certificate /etc/ssl/certs/calento.crt;
  ssl_certificate_key /etc/ssl/certs/calento.key;
  
  # SSL Security Settings
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;
  
  # Security Headers
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header Referrer-Policy "strict-origin-when-cross-origin" always;

  # API server - serve all requests to backend
  location / {
    proxy_pass http://server:8000;
    
    # CORS Headers for API domain - Allow multiple origins
    set $cors_origin "";
    if ($http_origin ~* "^https://qa\.calento\.space$") {
      set $cors_origin $http_origin;
    }
    if ($http_origin ~* "^http://localhost:3000$") {
      set $cors_origin $http_origin;
    }
    if ($http_origin ~* "^http://localhost:3001$") {
      set $cors_origin $http_origin;
    }
    
    add_header 'Access-Control-Allow-Origin' $cors_origin always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
    add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Accept, Origin, X-Requested-With' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    
    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-SSL on;
    
    # OPTIONS handling for CORS preflight
    if ($request_method = OPTIONS) {
      add_header 'Access-Control-Allow-Origin' $cors_origin;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH';
      add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Accept, Origin, X-Requested-With';
      add_header 'Access-Control-Allow-Credentials' 'true';
      add_header 'Content-Length' 0;
      add_header 'Content-Type' 'text/plain; charset=utf-8';
      return 204;
    }
  }
}

# HTTPS server for Client domain
server {
  listen 443 ssl;
  http2 on;
  server_name qa.calento.space localhost;

  # SSL Configuration
  ssl_certificate /etc/ssl/certs/calento.crt;
  ssl_certificate_key /etc/ssl/certs/calento.key;
  
  # SSL Security Settings
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;
  
  # Security Headers
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header Referrer-Policy "strict-origin-when-cross-origin" always;

  # Frontend proxy configuration
  location / {
    proxy_pass http://client:3000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-SSL on;
    proxy_buffering off;
    
    # WebSocket support for development
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }
}
